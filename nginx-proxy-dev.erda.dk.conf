# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

log_format migvhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;
# HTTP 1.1 support

# Catch all plain HTTP vhost
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name dev.erda.dk dev-www.erda.dk dev-ext.erda.dk dev-cert.erda.dk dev-oid.erda.dk dev-sid.erda.dk;

	location / {
		proxy_pass http://$host;
	}
        # TODO: force all but LetsEncrypt verification requests to https	
	#location / {
	#	return 301 https://$host$request_uri;
        #}
	access_log /var/log/nginx/access.log migvhost;
}

# dev.erda.dk
upstream dev.erda.dk {
			## Can be connected with "docker-migrid_default" network
			# migrid
			server migrid:80;
}

# dev-www.erda.dk (public web server on HTTPS)
upstream dev-www.erda.dk {
			## Can be connected with "docker-migrid_default" network
			# migrid
			server migrid:444;
}

server {
	server_name dev-www.erda.dk;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log migvhost;

	ssl_certificate /etc/nginx/certs/dev-www.erda.dk.crt;
	ssl_certificate_key /etc/nginx/certs/dev-www.erda.dk.key;
        # NOTE: allow bigger uploads to avoid breaking chunked upload on web
        client_max_body_size 64M; 
        # NOTE: include the general https hardening everywhere with HTTPS 
        include /etc/nginx/harden-https.conf;        
	location / {
		proxy_pass https://dev-www.erda.dk;
	}
}

# dev-ext.erda.dk (internal openid vhost - i.e. mig_oid)
# IMPORTANT: openid redirect piing-pong appears to require vhost on port 443
#            We moved www vhost to 444 instead until we have multiple IPs.
upstream dev-ext.erda.dk {
			## Can be connected with "docker-migrid_default" network
			# migrid
			server migrid:443;
}

server {
	server_name dev-ext.erda.dk;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log migvhost;

	ssl_certificate /etc/nginx/certs/dev-ext.erda.dk.crt;
	ssl_certificate_key /etc/nginx/certs/dev-ext.erda.dk.key;
        # NOTE: allow bigger uploads to avoid breaking chunked upload on web
        client_max_body_size 64M; 
        # NOTE: include the general https hardening everywhere with HTTPS 
        include /etc/nginx/harden-https.conf;        
	location / {
		proxy_pass https://dev-ext.erda.dk;
	}
}

# dev-oid.erda.dk (external openid vhost - i.e. ext_oid)
upstream dev-oid.erda.dk {
			## Can be connected with "docker-migrid_default" network
			# migrid
			server migrid:445;
}

server {
	server_name dev-oid.erda.dk;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log migvhost;
	ssl_certificate /etc/nginx/certs/dev-oid.erda.dk.crt;
	ssl_certificate_key /etc/nginx/certs/dev-oid.erda.dk.key;
        # NOTE: allow bigger uploads to avoid breaking chunked upload on web
        client_max_body_size 64M; 
        # NOTE: include the general https hardening everywhere with HTTPS 
        include /etc/nginx/harden-https.conf;        
	location / {
		proxy_pass https://dev-oid.erda.dk;
	}
}

# dev-cert.erda.dk (internal cert vhost - i.e. mig_cert)
upstream dev-cert.erda.dk {
			## Can be connected with "docker-migrid_default" network
			# migrid
			server migrid:446;
}

server {
	server_name dev-cert.erda.dk;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log migvhost;

	ssl_certificate /etc/nginx/certs/dev-cert.erda.dk.crt;
	ssl_certificate_key /etc/nginx/certs/dev-cert.erda.dk.key;
        # NOTE: allow bigger uploads to avoid breaking chunked upload on web
        client_max_body_size 64M; 
        # NOTE: include the general https hardening everywhere with HTTPS 
        include /etc/nginx/harden-https.conf;        
	location / {
		proxy_pass https://dev-cert.erda.dk;
	}
}

# dev-sid.erda.dk
upstream dev-sid.erda.dk {
			## Can be connected with "docker-migrid_default" network
			# migrid
			server migrid:448;
}

server {
	server_name dev-sid.erda.dk;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log migvhost;
	ssl_certificate /etc/nginx/certs/dev-sid.erda.dk.crt;
	ssl_certificate_key /etc/nginx/certs/dev-sid.erda.dk.key;
        # NOTE: allow bigger uploads to avoid breaking chunked upload on web
        client_max_body_size 64M; 
        # NOTE: include the general https hardening everywhere with HTTPS 
        include /etc/nginx/harden-https.conf;        
	location / {
		proxy_pass https://dev-sid.erda.dk;
	}
}
